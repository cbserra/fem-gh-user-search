var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));

// tailwind.config.cjs
var require_tailwind_config = __commonJS({
  "tailwind.config.cjs"(exports, module) {
    "use strict";
    module.exports = {
      content: [
        "./*.html",
        "./src/**/*.{js,ts,jsx,tsx,css}",
        "./node_modules/flowbite/**/*.js",
        "./node_modules/flowbite-react/lib/**/*.{js,ts}"
      ],
      darkMode: "class",
      theme: {
        extend: {
          borderRadius: {
            "input-radius": "1.5rem",
            "button-radius": "1.0rem"
          }
        },
        fontFamily: {
          mono: ["Space Mono", "monospace"]
        },
        colors: {
          transparent: "transparent",
          current: "currentColor",
          black: "#000",
          white: "#fff",
          azure: "#0079FF",
          "slate-gray": "#697C9A",
          "queen-blue": "#4B6A9B",
          gunmetal: "#2B3442",
          "off-white": "#FEFEFE",
          "ghost-white": "#F6F8FF",
          "dark-gunmetal": "#141D2F",
          "yankees-blue": "#1E2A47",
          "dark-toggle-hover": "#90A4D4",
          "button-hover": "#60ABFF",
          "avatar-outline-green": "#4BB543",
          red: "#F74646"
        },
        fontSize: {
          base: "62.5%",
          detail: ["1.3rem", { lineHeight: "2.2rem" }],
          "stats-label": ["1.1rem", { lineHeight: "1.6rem" }],
          "stats-label-lg": ["1.3rem", { lineHeight: "1.9rem" }],
          "detail-lg": ["1.5rem", { lineHeight: "2.2rem" }],
          body: ["1.3rem", { lineHeight: "2.5rem" }],
          "body-lg": ["1.5rem", { lineHeight: "2.5rem" }],
          links: ["1.3rem", { lineHeight: "1.9rem" }],
          "links-lg": ["1.6rem", { lineHeight: "2.4rem" }],
          toggle: [
            "1.3rem",
            {
              lineHeight: "1.9rem",
              letterSpacing: "0.25rem",
              fontWeight: "700"
            }
          ],
          "heading-1": [
            "2.6rem",
            {
              lineHeight: " 3.9rem",
              fontWeight: "700"
            }
          ],
          "heading-2": ["2.2rem", { lineHeight: "3.3rem", fontWeight: "700" }],
          "heading-3": ["1.6rem", { lineHeight: "2.4rem", fontWeight: "400" }],
          "heading-4": ["1.3rem", { lineHeight: "2.0rem", fontWeight: "400" }],
          input: ["1.3rem", { lineHeight: "2.5rem", fontWeight: "400" }],
          "input-lg": ["1.8rem", { lineHeight: "2.5rem", fontWeight: "400" }],
          button: ["1.4rem", { lineHeight: "2.1rem", fontWeight: "700" }],
          "button-lg": ["1.6rem", { lineHeight: "2.4rem", fontWeight: "700" }]
        },
        boxShadow: {
          section: "0px 16px 30px -10px rgba(70, 96, 187, 0.198567)"
        },
        fontWeight: {
          normal: "400",
          bold: "700"
        },
        backgroundImage: {
          "icon-company": "url('./assets/images/icon-company.svg')",
          "icon-location": "url('./assets/images/icon-location.svg')",
          "icon-website": "url('./assets/images/icon-website.svg')",
          "icon-twitter": "url('./assets/images/icon-twitter.svg')"
        }
      },
      plugins: [__require("flowbite/plugin")]
    };
  }
});

// vite.config.ts
import react from "@vitejs/plugin-react";
import { defineConfig } from "vite";
import { createHtmlPlugin } from "vite-plugin-html";
import viteImagemin from "vite-plugin-imagemin";
import svgr from "vite-plugin-svgr";

// vite-plugins.config.js
var vitePluginsConfig = {
  imagemin: {
    gifsicle: {
      optimizationLevel: 7,
      interlaced: false
    },
    webp: {
      quality: 75
    },
    optipng: {
      optimizationLevel: 7
    },
    mozjpeg: {
      quality: 20
    },
    pngquant: {
      quality: [0.8, 0.9],
      speed: 4
    },
    svgo: {
      plugins: [
        {
          name: "removeViewBox"
        },
        {
          name: "removeStyleElement",
          active: true
        }
      ]
    }
  }
};
var vite_plugins_config_default = vitePluginsConfig;

// postcss.config.js
var import_tailwind_config = __toESM(require_tailwind_config(), 1);
import autoprefixer from "autoprefixer";
import tailwind from "tailwindcss";
var postcss_config_default = {
  plugins: [tailwind(import_tailwind_config.default), autoprefixer]
};

// vite.config.ts
var { imagemin } = vite_plugins_config_default;
var vite_config_default = defineConfig({
  plugins: [
    svgr(),
    react(),
    viteImagemin(imagemin),
    createHtmlPlugin({
      minify: true,
      entry: "src/main.tsx"
    })
  ],
  css: {
    postcss: postcss_config_default
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
